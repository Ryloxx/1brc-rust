static NAMES: [&str; 476] = [
    "Abha",
    "Abidjan",
    "Abéché",
    "Accra",
    "Addis Ababa",
    "Adelaide",
    "Aden",
    "Ahvaz",
    "Albuquerque",
    "Alexandra",
    "Alexandria",
    "Algiers",
    "Alice Springs",
    "Almaty",
    "Amsterdam",
    "Anadyr",
    "Anchorage",
    "Andorra la Vella",
    "Ankara",
    "Antananarivo",
    "Antsiranana",
    "Arkhangelsk",
    "Ashgabat",
    "Asmara",
    "Assab",
    "Astana",
    "Athens",
    "Atlanta",
    "Auckland",
    "Austin",
    "Baghdad",
    "Baguio",
    "Baku",
    "Baltimore",
    "Bamako",
    "Bangkok",
    "Bangui",
    "Banjul",
    "Barcelona",
    "Bata",
    "Batumi",
    "Beijing",
    "Beirut",
    "Belgrade",
    "Belize City",
    "Benghazi",
    "Bergen",
    "Berlin",
    "Bilbao",
    "Birao",
    "Bishkek",
    "Bissau",
    "Blantyre",
    "Bloemfontein",
    "Boise",
    "Bordeaux",
    "Bosaso",
    "Boston",
    "Bouaké",
    "Bratislava",
    "Brazzaville",
    "Bridgetown",
    "Brisbane",
    "Brussels",
    "Bucharest",
    "Budapest",
    "Bujumbura",
    "Bulawayo",
    "Burnie",
    "Busan",
    "Cabo San Lucas",
    "Cairns",
    "Cairo",
    "Calgary",
    "Canberra",
    "Cape Town",
    "Changsha",
    "Charlotte",
    "Chiang Mai",
    "Chicago",
    "Chihuahua",
    "Chișinău",
    "Chittagong",
    "Chongqing",
    "Christchurch",
    "City of San Marino",
    "Colombo",
    "Columbus",
    "Conakry",
    "Copenhagen",
    "Cotonou",
    "Cracow",
    "Da Lat",
    "Da Nang",
    "Dakar",
    "Dallas",
    "Damascus",
    "Dampier",
    "Dar es Salaam",
    "Darwin",
    "Denpasar",
    "Denver",
    "Detroit",
    "Dhaka",
    "Dikson",
    "Dili",
    "Djibouti",
    "Dodoma",
    "Dolisie",
    "Douala",
    "Dubai",
    "Dublin",
    "Dunedin",
    "Durban",
    "Dushanbe",
    "Edinburgh",
    "Edmonton",
    "El Paso",
    "Entebbe",
    "Erbil",
    "Erzurum",
    "Fairbanks",
    "Fianarantsoa",
    "Flores, Petén",
    "Frankfurt",
    "Fresno",
    "Fukuoka",
    "Gabès",
    "Gaborone",
    "Gagnoa",
    "Gangtok",
    "Garissa",
    "Garoua",
    "George Town",
    "Ghanzi",
    "Gjoa Haven",
    "Guadalajara",
    "Guangzhou",
    "Guatemala City",
    "Halifax",
    "Hamburg",
    "Hamilton",
    "Hanga Roa",
    "Hanoi",
    "Harare",
    "Harbin",
    "Hargeisa",
    "Hat Yai",
    "Havana",
    "Helsinki",
    "Heraklion",
    "Hiroshima",
    "Ho Chi Minh City",
    "Hobart",
    "Hong Kong",
    "Honiara",
    "Honolulu",
    "Houston",
    "Ifrane",
    "Indianapolis",
    "Iqaluit",
    "Irkutsk",
    "Istanbul",
    "İzmir",
    "Jacksonville",
    "Jakarta",
    "Jayapura",
    "Jerusalem",
    "Johannesburg",
    "Jos",
    "Juba",
    "Kabul",
    "Kampala",
    "Kandi",
    "Kankan",
    "Kano",
    "Kansas City",
    "Karachi",
    "Karonga",
    "Kathmandu",
    "Khartoum",
    "Kingston",
    "Kinshasa",
    "Kolkata",
    "Kuala Lumpur",
    "Kumasi",
    "Kunming",
    "Kuopio",
    "Kuwait City",
    "Kyiv",
    "Kyoto",
    "La Ceiba",
    "La Paz",
    "Lagos",
    "Lahore",
    "Lake Havasu City",
    "Lake Tekapo",
    "Las Palmas de Gran Canaria",
    "Las Vegas",
    "Launceston",
    "Lhasa",
    "Libreville",
    "Lisbon",
    "Livingstone",
    "Ljubljana",
    "Lomé",
    "London",
    "Los Angeles",
    "Louisville",
    "Luanda",
    "Lubumbashi",
    "Lusaka",
    "Luxembourg City",
    "Lviv",
    "Macapá",
    "Maceió",
    "Machala",
    "Madrid",
    "Málaga",
    "Malindi",
    "Managua",
    "Manaus",
    "Manchester",
    "Manila",
    "Maputo",
    "Maracaibo",
    "Marrakech",
    "Marseille",
    "Maseru",
    "Masindi",
    "Matadi",
    "Mazatlán",
    "Mbabane",
    "Mbarara",
    "McMurdo Station",
    "Medan",
    "Medellín",
    "Melbourne",
    "Mendoza",
    "Mexico City",
    "Miami",
    "Milan",
    "Minsk",
    "Monaco",
    "Monrovia",
    "Montevideo",
    "Monterrey",
    "Montréal",
    "Moose Factory",
    "Mopti",
    "Moroni",
    "Moscow",
    "Mossel Bay",
    "Mumbai",
    "Munich",
    "Nairobi",
    "Nakhchivan",
    "Nairobi",
    "Nakhchivan",
    "Nakhodka",
    "Nalut",
    "Nampula",
    "Nanjing",
    "Nanning",
    "Nantes",
    "Naples",
    "Naypyidaw",
    "Ndola",
    "N'Djamena",
    "Nelson",
    "New Delhi",
    "New York City",
    "Niamey",
    "Nicosia",
    "Nizhnevartovsk",
    "Nizhny Novgorod",
    "Nomuka",
    "Norilsk",
    "Nouakchott",
    "Nouméa",
    "Nukualofa",
    "Odessa",
    "Omsk",
    "Oranjestad",
    "Osaka",
    "Oslo",
    "Ottawa",
    "Padang",
    "Palikir",
    "Panama City",
    "Papeete",
    "Paramaribo",
    "Paris",
    "Pemba",
    "Perth",
    "Peshawar",
    "Phnom Penh",
    "Phoenix",
    "Pointe-à-Pitre",
    "Ponta Delgada",
    "Port Harcourt",
    "Port Louis",
    "Port Moresby",
    "Port of Spain",
    "Port Vila",
    "Portland",
    "Porto",
    "Porto-Novo",
    "Prague",
    "Praia",
    "Pretoria",
    "Providence",
    "Puebla",
    "Puerto Baquerizo Moreno",
    "Puerto Montt",
    "Puerto Princesa",
    "Punta Arenas",
    "Pyongyang",
    "Quebec City",
    "Queenstown",
    "Quito",
    "Rabat",
    "Recife",
    "Reykjavik",
    "Richmond",
    "Rio de Janeiro",
    "Riyadh",
    "Rome",
    "Rostov-on-Don",
    "Rotterdam",
    "Sacramento",
    "Saint-Denis",
    "Saint George's",
    "Saint Helier",
    "Saint John's",
    "Saint Peter Port",
    "Saint Pierre",
    "Saint-Denis",
    "Saint-Pierre",
    "Salzburg",
    "Samara",
    "San Antonio",
    "San Diego",
    "San Francisco",
    "San José",
    "San Juan",
    "San Luis Potosí",
    "San Marino",
    "San Miguel de Tucumán",
    "San Pedro Sula",
    "San Salvador",
    "Santa Cruz de la Sierra",
    "Santa Fe",
    "Santiago",
    "Santo Domingo",
    "São Luís",
    "São Paulo",
    "Sapporo",
    "Sarajevo",
    "Saratov",
    "Seattle",
    "Sejong City",
    "Semarang",
    "Seoul",
    "Sergiyev Posad",
    "Sevastopol",
    "Shanghai",
    "Shantou",
    "Shenyang",
    "Shenzhen",
    "Sherbrooke",
    "Shiraz",
    "Sibolga",
    "Siem Reap",
    "Simferopol",
    "Singapore",
    "Skopje",
    "Sofia",
    "Songkhla",
    "Sorong",
    "Sørkapp Land",
    "South Tarawa",
    "Split",
    "Sri Jayawardenepura Kotte",
    "St. John's",
    "St. Louis",
    "St. Petersburg",
    "Stanley",
    "Stockholm",
    "Sucre",
    "Suez",
    "Suva",
    "Sydney",
    "Sylvan Lake",
    "Tabriz",
    "Taichung",
    "Tainan",
    "Taipei",
    "Tallahassee",
    "Tallinn",
    "Tampa",
    "Tangier",
    "Tashkent",
    "Tbilisi",
    "Tegucigalpa",
    "Tehran",
    "Tel Aviv",
    "Thimphu",
    "Tianjin",
    "Tijuana",
    "Timișoara",
    "Tiraspol",
    "Tokyo",
    "Toronto",
    "Tórshavn",
    "Toulon",
    "Trondheim",
    "Tunis",
    "Turin",
    "Ulaanbaatar",
    "Ulan-Ude",
    "Ulanhot",
    "Umeå",
    "Ushuaia",
    "Utrecht",
    "Vaduz",
    "Valdivia",
    "Valletta",
    "Vancouver",
    "Vatican City",
    "Velas",
    "Venice",
    "Victoria",
    "Vienna",
    "Vientiane",
    "Vigo",
    "Vilnius",
    "Virginia Beach",
    "Vladikavkaz",
    "Vladimir",
    "Vladivostok",
    "Vlorë",
    "Volgograd",
    "Vologda",
    "Voronezh",
    "Wa",
    "Warsaw",
    "Washington, D.C.",
    "Wellington",
    "Wichita",
    "Windhoek",
    "Winnipeg",
    "Wroclaw",
    "Wuhan",
    "Wuzhou",
    "Xiamen",
    "Xi'an",
    "Yakutsk",
    "Yalta",
    "Yamoussoukro",
    "Yan'an",
    "Yaroslavl",
    "Yerevan",
    "Yinchuan",
    "Yokohama",
    "Yoshkar-Ola",
    "Yuzhno-Sakhalinsk",
    "Zagreb",
    "Zamboanga City",
    "Zanzibar City",
    "Zaporizhzhia",
    "Zaragoza",
    "Zarqa",
    "Zhengzhou",
    "Zürich",
    "Zvishavane",
];
use std::{
    env::args,
    fs::OpenOptions,
    io::Write,
    thread::JoinHandle,
};

use rand::{thread_rng, Rng};

fn gen(cnt: u32, num_cpu: u8) -> Vec<u8> {
    let chunk_size = cnt / num_cpu as u32;
    let results = (0..num_cpu)
        .map(|i| {
            std::thread::spawn(move || {
                let mut rng = thread_rng();
                let mut ret = String::new();
                let start = i as u32 * chunk_size;
                let end = cnt.min(start + chunk_size);
                for _ in start..end {
                    ret.push_str(
                        format!(
                            "{};{:.1}\n",
                            NAMES[rng.gen_range(0..NAMES.len())],
                            (rng.gen::<f32>() * 2. - 1.) * 99.99
                        )
                        .as_str(),
                    );
                }
                ret.into_bytes()
            })
        })
        .collect::<Vec<JoinHandle<Vec<u8>>>>();
    results
        .into_iter()
        .flat_map(|handle| handle.join())
        .collect::<Vec<Vec<u8>>>()
        .concat()
}
fn main() -> Result<(), String> {
    let output_file = "measurements_data.txt";
    let num_cpu = 1.max(
        args()
            .nth(1)
            .ok_or("Num cpu is required.".to_string())?
            .parse::<u8>()
            .map_err(|err| err.to_string())?,
    );
    let entries_count = args()
        .nth(2)
        .unwrap_or("1000000000".to_string())
        .parse::<u32>()
        .map_err(|err| err.to_string())?;
    if entries_count > 1_000_000_000 {
        println!("Entries count is greater than 1 billion, do you wish to continue anyway?(y/n)");
        let mut input = String::new();
        std::io::stdin()
            .read_line(&mut input)
            .expect("Failed to read line");
        match input.trim() {
            "yes" | "y" => {}
            _ => {
                println!("Aborting");
                return Ok(());
            }
        }
    }
    println!("Generating {entries_count} entries in {output_file} using {num_cpu} cpu(s)");
    let mut file = OpenOptions::new()
        .create(true)
        .write(true)
        .truncate(true)
        .open(output_file)
        .map_err(|err| err.to_string())?;
    let batch_size = 33_333_334;
    let mut current = entries_count;
    loop {
        file.write_all(&gen(current.min(batch_size), num_cpu))
            .map_err(|err| err.to_string())?;
        if batch_size >= current {
            break;
        }
        current -= batch_size;
        println!(
            "{}%",
            (100. * (1. - (current as f32 / entries_count as f32))) as i32
        );
    }
    println!("100%");
    let len = file.metadata().unwrap().len();
    // Remove the last \n
    file.set_len(len - 1).unwrap();
    Ok(())
}
